#pragma once

#include <rclcpp/rclcpp.hpp>
{% if has_action_server %}
#include <rclcpp_action/rclcpp_action.hpp>
#include <template_interfaces_pkg/action/fibonacci.hpp>
{% endif %}
#include <std_msgs/msg/int32.hpp>
{% if has_service_server %}
#include <std_srvs/srv/set_bool.hpp>
{% endif %}


namespace {{ package_name }} {


class {{ node_class_name }} : public rclcpp::Node {

 public:

{% if is_component %}
  explicit {{ node_class_name }}(const rclcpp::NodeOptions& options);
{% else %}
  {{ node_class_name }}();
{% endif %}

 private:

{% if has_subscriber %}
  static const std::string kInputTopic;
{% endif %}
{% if has_publisher %}
  static const std::string kOutputTopic;
{% endif %}
{% if has_params %}
  static const std::string kParam;
{% endif %}

 private:

{% if has_params %}
  void loadParameters();

{% endif %}
  void setup();

{% if has_params %}
  rcl_interfaces::msg::SetParametersResult parametersCallback(const std::vector<rclcpp::Parameter>& parameters);

{% endif %}
{% if has_subscriber %}
  void topicCallback(const std_msgs::msg::Int32& msg);

{% endif %}
{% if has_service_server %}
  void serviceCallback(const std::shared_ptr<std_srvs::srv::SetBool::Request>request, std::shared_ptr<std_srvs::srv::SetBool::Response> response);

{% endif %}
{% if has_action_server %}
  rclcpp_action::GoalResponse actionHandleGoal(const rclcpp_action::GoalUUID& uuid,std::shared_ptr<const template_interfaces_pkg::action::Fibonacci::Goal> goal);
  rclcpp_action::CancelResponse actionHandleCancel(const std::shared_ptr<rclcpp_action::ServerGoalHandle<template_interfaces_pkg::action::Fibonacci>> goal_handle);
  void actionHandleAccepted(const std::shared_ptr<rclcpp_action::ServerGoalHandle<template_interfaces_pkg::action::Fibonacci>> goal_handle);
  void actionExecute(const std::shared_ptr<rclcpp_action::ServerGoalHandle<template_interfaces_pkg::action::Fibonacci>> goal_handle);

{% endif %}
{% if has_timer %}
  void publishTimerCallback();

{% endif %}
 private:

{% if has_params %}
  OnSetParametersCallbackHandle::SharedPtr parameters_callback_;

{% endif %}
{% if has_subscriber %}
  rclcpp::Subscription<std_msgs::msg::Int32>::SharedPtr subscriber_;

{% endif %}
{% if has_publisher %}
  rclcpp::Publisher<std_msgs::msg::Int32>::SharedPtr publisher_;

{% endif %}
{% if has_service_server %}
  rclcpp::Service<std_srvs::srv::SetBool>::SharedPtr service_server_;

{% endif %}
{% if has_action_server %}
  rclcpp_action::Server<template_interfaces_pkg::action::Fibonacci>::SharedPtr action_server_;

{% endif %}
{% if has_timer %}
  rclcpp::TimerBase::SharedPtr publish_timer_;

{% endif %}
{% if has_params %}
  double param_ = 1.0;

{% endif %}

  int count_ = 0;
};


}
