{% if is_lifecycle %}
#include <algorithm>
{% endif %}
{% if has_timer %}
#include <chrono>
{% endif %}
#include <functional>
{% if has_action_server %}
#include <thread>
{% endif %}

#include <{{ package_name }}/{{ node_name }}.hpp>
{% if is_component %}

#include <rclcpp_components/register_node_macro.hpp>
RCLCPP_COMPONENTS_REGISTER_NODE({{ package_name }}::{{ node_class_name }})
{% endif %}


namespace {{ package_name }} {


{% if has_subscriber %}
const std::string {{ node_class_name }}::kInputTopic = "~/input";
{% endif %}
{% if has_publisher %}
const std::string {{ node_class_name }}::kOutputTopic = "~/output";
{% endif %}
{% if has_service_server %}
const std::string {{ node_class_name }}::kService = "~/service";
{% endif %}
{% if has_action_server %}
const std::string {{ node_class_name }}::kAction = "~/action";
{% endif %}
{% if has_params %}
const std::string {{ node_class_name }}::kParam = "param";
{% endif %}


/**
 * @brief Constructor
 *
 * @param options node options
 */
{% if is_lifecycle and is_component %}
{{ node_class_name }}::{{ node_class_name }}(const rclcpp::NodeOptions& options) : rclcpp_lifecycle::LifecycleNode("{{ node_name }}", options) {
{% elif is_lifecycle %}
{{ node_class_name }}::{{ node_class_name }}() : rclcpp_lifecycle::LifecycleNode("{{ node_name }}") {
{% elif is_component %}
{{ node_class_name }}::{{ node_class_name }}(const rclcpp::NodeOptions& options) : Node("{{ node_name }}", options) {
{% else %}
{{ node_class_name }}::{{ node_class_name }}() : Node("{{ node_name }}") {
{% endif %}

{% if has_params or is_lifecycle %}
  this->declareParameters();
{% endif %}
{% if is_lifecycle %}
  int startup_state = this->get_parameter("startup_state").as_int();
  if (startup_state > lifecycle_msgs::msg::State::PRIMARY_STATE_UNCONFIGURED)
    this->trigger_transition(lifecycle_msgs::msg::Transition::TRANSITION_CONFIGURE);
  if (startup_state > lifecycle_msgs::msg::State::PRIMARY_STATE_INACTIVE)
    this->trigger_transition(lifecycle_msgs::msg::Transition::TRANSITION_ACTIVATE);
{% else %}
{% if has_params %}
  this->loadParameters();
{% endif %}
  this->setup();
{% endif %}
}
{% if is_lifecycle %}


/**
 * @brief Declares a parameter if it is not already declared
 *
 * @tparam T anything convertible to either rclcpp::ParameterValue or rclcpp::ParameterType
 * @param name parameter name
 * @param type_or_default default value or rclcpp::ParameterType
 * @param desc parameter description
 */
template <typename T>
void {{ node_class_name }}::declareParameterIfNotExists(const std::string& name, const T& type_or_default, const std::string& desc) {

  auto params = this->list_parameters({name}, 1);
  if (std::find(params.names.begin(), params.names.end(), name) == params.names.end()) {
    rcl_interfaces::msg::ParameterDescriptor descriptor;
    descriptor.description = desc;
    declare_parameter(name, type_or_default, descriptor);
  }
}
{% endif %}
{% if has_params or is_lifecycle %}


/**
 * @brief Declares parameters
 */
void {{ node_class_name }}::declareParameters() {
{% if is_lifecycle %}

  this->declareParameterIfNotExists("startup_state", lifecycle_msgs::msg::State::PRIMARY_STATE_ACTIVE, "Initial lifecycle state");
{% endif %}
{% if has_params %}

  rcl_interfaces::msg::ParameterDescriptor param_desc;
  param_desc.description = "TODO";
  rcl_interfaces::msg::FloatingPointRange param_range;
  param_range.set__from_value(0.1).set__to_value(10.0).set__step(0.1);
  param_desc.floating_point_range = {param_range};
  this->declare_parameter(kParam, rclcpp::ParameterType::PARAMETER_DOUBLE, param_desc);
{% endif %}
}
{% endif %}
{% if has_params %}


/**
 * @brief Loads parameters
 */
void {{ node_class_name }}::loadParameters() {

  try {
    param_ = this->get_parameter(kParam).as_double();
  } catch (rclcpp::exceptions::ParameterUninitializedException&) {
    RCLCPP_FATAL(this->get_logger(), "Parameter '%s' is required", kParam.c_str());
    exit(EXIT_FAILURE);
  }
}


/**
 * @brief Handles reconfiguration when a parameter value is changed
 *
 * @param parameters parameters
 * @return parameter change result
 */
rcl_interfaces::msg::SetParametersResult {{ node_class_name }}::parametersCallback(const std::vector<rclcpp::Parameter>& parameters) {

  // update timer with newly configured period parameter value
  for (const auto& param : parameters) {
    if (param.get_name() == kParam) {
      param_ = param.as_double();
    }
  }

  // mark parameter change successful
  rcl_interfaces::msg::SetParametersResult result;
  result.successful = true;
  result.reason = "success";

  return result;
}
{% endif %}


/**
 * @brief Sets up subscribers, publishers, etc. to configure the node
 */
void {{ node_class_name }}::setup() {
{% if has_params %}

  // callback for dynamic parameter configuration
  parameters_callback_ = this->add_on_set_parameters_callback(std::bind(&{{ node_class_name }}::parametersCallback, this, std::placeholders::_1));
{% endif %}
{% if has_subscriber %}

  // subscriber for handling incoming messages
  subscriber_ = this->create_subscription<std_msgs::msg::Int32>(kInputTopic, 10, std::bind(&{{ node_class_name }}::topicCallback, this, std::placeholders::_1));
  RCLCPP_INFO(this->get_logger(), "Subscribed to '%s'", subscriber_->get_topic_name());
{% endif %}
{% if has_publisher %}

  // publisher for publishing outgoing messages
  publisher_ = this->create_publisher<std_msgs::msg::Int32>(kOutputTopic, 10);
  RCLCPP_INFO(this->get_logger(), "Publishing to '%s'", publisher_->get_topic_name());
{% endif %}
{% if has_service_server %}

  // service server for handling service calls
  service_server_ = this->create_service<std_srvs::srv::SetBool>(kService, std::bind(&{{ node_class_name }}::serviceCallback, this, std::placeholders::_1, std::placeholders::_2));
{% endif %}
{% if has_action_server %}

  // action server for handling action goal requests
  action_server_ = rclcpp_action::create_server<{{ package_name }}_actions::action::Fibonacci>(
    this,
    kAction,
    std::bind(&{{ node_class_name }}::actionHandleGoal, this, std::placeholders::_1, std::placeholders::_2),
    std::bind(&{{ node_class_name }}::actionHandleCancel, this, std::placeholders::_1),
    std::bind(&{{ node_class_name }}::actionHandleAccepted, this, std::placeholders::_1)
  );
{% endif %}
{% if has_timer and not is_lifecycle %}

  // timer for repeatedly invoking a callback to publish messages
  timer_ = this->create_wall_timer(std::chrono::duration<double>(param_), std::bind(&{{ node_class_name }}::timerCallback, this));
{% endif %}
{% if auto_shutdown and not is_lifecycle %}

  auto_shutdown_timer_ = this->create_wall_timer(std::chrono::duration<double>(3.0), std::bind(&{{ node_class_name }}::autoShutdownTimerCallback, this));
{% endif %}
}
{% if has_subscriber %}


/**
 * @brief Processes messages received by a subscriber
 *
 * @param msg message
 */
void {{ node_class_name }}::topicCallback(const std_msgs::msg::Int32& msg) {

  RCLCPP_INFO(this->get_logger(), "Message received: '%d'", msg.data);
}
{% endif %}
{% if has_service_server %}


/**
 * @brief Processes service requests
 *
 * @param request service request
 * @param response service response
 */
void {{ node_class_name }}::serviceCallback(const std_srvs::srv::SetBool::Request::SharedPtr request, std_srvs::srv::SetBool::Response::SharedPtr response) {

  (void)request;

  RCLCPP_INFO(this->get_logger(), "Received service request");

  response->success = true;
}
{% endif %}
{% if has_action_server %}


/**
 * @brief Processes action goal requests
 *
 * @param uuid unique goal identifier
 * @param goal action goal
 * @return goal response
 */
rclcpp_action::GoalResponse {{ node_class_name }}::actionHandleGoal(const rclcpp_action::GoalUUID& uuid, {{ package_name }}_actions::action::Fibonacci::Goal::ConstSharedPtr goal) {

  (void)uuid;
  (void)goal;

  RCLCPP_INFO(this->get_logger(), "Received action goal request");

  return rclcpp_action::GoalResponse::ACCEPT_AND_EXECUTE;
}


/**
 * @brief Processes action cancel requests
 *
 * @param goal_handle action goal handle
 * @return cancel response
 */
rclcpp_action::CancelResponse {{ node_class_name }}::actionHandleCancel(const std::shared_ptr<rclcpp_action::ServerGoalHandle<{{ package_name }}_actions::action::Fibonacci>> goal_handle) {

  (void)goal_handle;

  RCLCPP_INFO(this->get_logger(), "Received request to cancel action goal");

  return rclcpp_action::CancelResponse::ACCEPT;
}


/**
 * @brief Processes accepted action goal requests
 *
 * @param goal_handle action goal handle
 */
void {{ node_class_name }}::actionHandleAccepted(const std::shared_ptr<rclcpp_action::ServerGoalHandle<{{ package_name }}_actions::action::Fibonacci>> goal_handle) {

  // execute action in a separate thread to avoid blocking
  std::thread{std::bind(&{{ node_class_name }}::actionExecute, this, std::placeholders::_1), goal_handle}.detach();
}


/**
 * @brief Executes an action
 *
 * @param goal_handle action goal handle
 */
void {{ node_class_name }}::actionExecute(const std::shared_ptr<rclcpp_action::ServerGoalHandle<{{ package_name }}_actions::action::Fibonacci>> goal_handle) {

  RCLCPP_INFO(this->get_logger(), "Executing action goal");

  // define a sleeping rate between computing individual Fibonacci numbers
  rclcpp::Rate loop_rate(1);

  // create handy accessors for the action goal, feedback, and result
  const auto goal = goal_handle->get_goal();
  auto feedback = std::make_shared<{{ package_name }}_actions::action::Fibonacci::Feedback>();
  auto result = std::make_shared<{{ package_name }}_actions::action::Fibonacci::Result>();

  // initialize the Fibonacci sequence
  auto& partial_sequence = feedback->partial_sequence;
  partial_sequence.push_back(0);
  partial_sequence.push_back(1);

  // compute the Fibonacci sequence up to the requested order n
  for (int i = 1; i < goal->order && rclcpp::ok(); ++i) {

    // cancel, if requested
    if (goal_handle->is_canceling()) {
      result->sequence = feedback->partial_sequence;
      goal_handle->canceled(result);
      RCLCPP_INFO(this->get_logger(), "Action goal canceled");
      return;
    }

    // compute the next Fibonacci number
    partial_sequence.push_back(partial_sequence[i] + partial_sequence[i - 1]);

    // publish the current sequence as action feedback
    goal_handle->publish_feedback(feedback);
    RCLCPP_INFO(this->get_logger(), "Publishing action feedback");

    // sleep before computing the next Fibonacci number
    loop_rate.sleep();
  }

  // finish by publishing the action result
  if (rclcpp::ok()) {
    result->sequence = partial_sequence;
    goal_handle->succeed(result);
    RCLCPP_INFO(this->get_logger(), "Goal succeeded");
  }
}
{% endif %}
{% if has_timer %}


/**
 * @brief Processes timer triggers
 */
void {{ node_class_name }}::timerCallback() {

  RCLCPP_INFO(this->get_logger(), "Timer triggered");
}
{% endif %}
{% if auto_shutdown %}


/**
 * @brief Processes timer triggers to auto-shutdown the node
 */
void {{ node_class_name }}::autoShutdownTimerCallback() {

  RCLCPP_INFO(this->get_logger(), "Shutting down");
  rclcpp::shutdown();
}
{% endif %}
{% if is_lifecycle %}


/**
 * @brief Processes 'configuring' transitions to 'inactive' state
 *
 * @param state previous state
 * @return transition result
 */
rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn {{ node_class_name }}::on_configure(const rclcpp_lifecycle::State& state) {

  RCLCPP_INFO(get_logger(), "Configuring to enter 'inactive' state from '%s' state", state.label().c_str());

{% if has_params %}
  loadParameters();
{% endif %}
  setup();

  return rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn::SUCCESS;
}


/**
 * @brief Processes 'activating' transitions to 'active' state
 *
 * @param state previous state
 * @return transition result
 */
rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn {{ node_class_name }}::on_activate(const rclcpp_lifecycle::State& state) {

  RCLCPP_INFO(get_logger(), "Activating to enter 'active' state from '%s' state", state.label().c_str());

{% if has_publisher %}
  publisher_->on_activate();
{% endif %}
{% if has_timer %}
  timer_ = this->create_wall_timer(std::chrono::duration<double>(param_), std::bind(&{{ node_class_name }}::timerCallback, this));
{% endif %}
{% if auto_shutdown %}

  auto_shutdown_timer_ = this->create_wall_timer(std::chrono::duration<double>(3.0), std::bind(&{{ node_class_name }}::autoShutdownTimerCallback, this));
{% endif %}

  return rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn::SUCCESS;
}


/**
 * @brief Processes 'deactivating' transitions to 'inactive' state
 *
 * @param state previous state
 * @return transition result
 */
rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn {{ node_class_name }}::on_deactivate(const rclcpp_lifecycle::State& state) {

  RCLCPP_INFO(get_logger(), "Deactivating to enter 'inactive' state from '%s' state", state.label().c_str());

{% if has_timer %}
  timer_.reset();
{% endif %}
{% if has_publisher %}
  publisher_->on_deactivate();
{% endif %}

  return rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn::SUCCESS;
}


/**
 * @brief Processes 'cleningup' transitions to 'unconfigured' state
 *
 * @param state previous state
 * @return transition result
 */
rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn {{ node_class_name }}::on_cleanup(const rclcpp_lifecycle::State& state) {

  RCLCPP_INFO(get_logger(), "Cleaning up to enter 'unconfigured' state from '%s' state", state.label().c_str());

{% if has_subscriber %}
  subscriber_.reset();
{% endif %}
{% if has_publisher %}
  publisher_.reset();
{% endif %}
{% if has_service_server %}
  service_server_.reset();
{% endif %}
{% if has_action_server %}
  action_server_.reset();
{% endif %}
{% if has_params %}
  parameters_callback_.reset();
{% endif %}
{% if has_timer %}
  timer_.reset();
{% endif %}

  return rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn::SUCCESS;
}


/**
 * @brief Processes 'shuttingdown' transitions to 'finalized' state
 *
 * @param state previous state
 * @return transition result
 */
rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn {{ node_class_name }}::on_shutdown(const rclcpp_lifecycle::State& state) {

  RCLCPP_INFO(get_logger(), "Shutting down to enter 'finalized' state from '%s' state", state.label().c_str());

  if (state.id() >= lifecycle_msgs::msg::State::PRIMARY_STATE_ACTIVE)
    on_deactivate(state);
  if (state.id() >= lifecycle_msgs::msg::State::PRIMARY_STATE_INACTIVE)
    on_cleanup(state);

  return rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn::SUCCESS;
}
{% endif %}


}
{% if not is_component %}


int main(int argc, char *argv[]) {

  rclcpp::init(argc, argv);
{% if is_lifecycle %}
  rclcpp::spin(std::make_shared<{{ package_name }}::{{ node_class_name }}>()->get_node_base_interface());
{% else %}
  rclcpp::spin(std::make_shared<{{ package_name }}::{{ node_class_name }}>());
{% endif %}
  rclcpp::shutdown();

  return 0;
}
{% endif %}
